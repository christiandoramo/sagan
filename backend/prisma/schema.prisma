// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UploadType {
  ARTICLE
  EVENT_BANNER
  PROFILE_PICTURE
}

enum UserRole {
  STUDENT
  PROFESSOR
  TECH_MANAGER
  ADMIN
}

enum EventRole {
  PARTICIPANT
  ORGANIZER
  OWNER
}

enum ArticleRole {
  REVIEWER
  AUTHOR
  CO_AUTHOR
}

enum ArticleStatus {
  PENDING
  ON_REVIEW
  CLOSED
}

model Upload {
  id         String     @id @default(uuid())
  storageId  String     @map("storage_id")
  filename   String
  url        String
  uploadType UploadType @map("upload_type")
  extension  String
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  events     Event[]
  articles   Article[]

  @@map("uploads")
}

model User {
  id            String          @id @default(uuid())
  name          String
  college       College         @relation(fields: [collegeId], references: [id])
  role          UserRole        @default(STUDENT)
  email         String          @unique
  password      String
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  events        UsersEvents[]
  usersArticles UsersArticles[]
  collegeId     Int             @map("college_id")

  @@map("users")
}

model Event {
  id          String        @id @default(uuid())
  title       String
  description String
  category    String
  startDate   DateTime      @map("start_date")
  endDate     DateTime      @map("end_date")
  isActive    Boolean       @default(true) @map("is_active")
  banner      Upload?       @relation(fields: [uploadId], references: [id])
  uploadId    String?       @map("upload_id")
  criterias   Json
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  users       UsersEvents[]

  @@map("events")
}

model UsersEvents {
  id        String    @id @default(uuid())
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?   @map("user_id")
  event     Event?    @relation(fields: [eventId], references: [id])
  eventId   String?   @map("event_id")
  role      EventRole @map("event_role")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("users_events")
}

model Article {
  id            String          @id @default(uuid())
  title         String
  knowledgeArea String          @map("knowledge_area")
  keywords      String
  language      String
  status        ArticleStatus   @default(PENDING)
  users         UsersArticles[]
  file          Upload?         @relation(fields: [uploadId], references: [id])
  rating        Json            @default("{\"originality\": 0, \"contribution\": 0, \"writing\": 0, \"objectivity\": 0, \"textFidelity\": 0}")
  uploadId      String?         @map("upload_id")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")

  @@map("articles")
}

model UsersArticles {
  id        String      @id @default(uuid())
  user      User?       @relation(fields: [userId], references: [id])
  userId    String      @map("user_id")
  article   Article?    @relation(fields: [articleId], references: [id])
  articleId String      @map("article_id")
  role      ArticleRole @map("article_role")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  @@map("users_articles")
}

model College {
  id        Int      @id @default(autoincrement())
  name      String
  initials  String
  uf        String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  users     User[]

  @@map("colleges")
}
